//1. What design principles does this code violate?
//      This code violates the principle: Depend on Abstractions, not concretions
//2. Refactor the code to improve its design.

// Game.java
// Abstract class
abstract class Game {
  StringBuffer board;
  // Abstract method (does not have a body)
  public abstract void move();
  public abstract void play();
  public abstract char winner();
}

// TicTacToe.java
// Subclass (inherit from Game)
public class TicTacToe extends Game {

  public TicTacToe(String s) {board = new StringBuffer(s);}

  public TicTacToe(StringBuffer s, int position, char player) {
    board = new StringBuffer();
    board.append(s);
    board.setCharAt(position, player);
  }

  public int move(char player) {
    for (int i = 0; i < 9; i++) {
      if (board.charAt(i) == '-') {
        Game game = play(i, player);
        if (game.winner() == player)
          return i;
      }
    }
    for (int i = 0; i < 9; i++) {
      if (board.charAt(i) == '-')
        return i;
    }
    return -1;
  }

  public TicTacToe play(int i, char player) {
    return new TicTacToe(this.board, i, player);
  }

  public char winner() {
    if (board.charAt(0) != '-'
      && board.charAt(0) == board.charAt(1)
      && board.charAt(1) == board.charAt(2))
      return board.charAt(0);
    if (board.charAt(3) != '-'
      && board.charAt(3) == board.charAt(4)
      && board.charAt(4) == board.charAt(5))
      return board.charAt(3);
    if (board.charAt(6) != '-'
      && board.charAt(6) == board.charAt(7)
      && board.charAt(7) == board.charAt(8))
      return board.charAt(6);
    return '-';
  }
}

// GameTest.java
import org.junit.Assert;
import junit.framework.*;

public class GameTest extends TestCase {

  public GameTest(String s) {super(s);}

  public void testDefaultMove() {
    Game game = new TicTacToe("XOXOX-OXO");
    assertEquals(5, game.move('X'));

    game = new Game("XOXOXOOX-");
    assertEquals(8, game.move('O'));

    game = new Game("---------");
    assertEquals(0, game.move('X'));

    game = new Game("XXXXXXXXX");
    assertEquals(-1, game.move('X'));
  }

  public void testFindWinningMove() {
    Game game = new Game("XO-XX-OOX");
    assertEquals(5, game.move('X'));
  }
  public void testWinConditions() {
    Game game = new Game("---XXX---");
    assertEquals('X', game.winner());
  }
}